@model IEnumerable<JobApplicationPortal.Models.Job>

@{
    Layout = "_Layout";
    ViewData["Title"] = "Browse Job Listings";
}

<div class="job-listings-container">
    <h1>@ViewData["Title"]</h1>
    <div class="search-bar">
        <input type="text" placeholder="Job Title or Keywords" id="title-filter" class="search-input" />
        <input type="text" placeholder="Location" id="location-filter" class="search-input" />
        <button class="search-btn" onclick="filterJobs()">Search</button>
    </div>
    <div id="job-listings" class="job-listings">
        @foreach (var job in Model)
        {
            <div class="job-card" data-title="@job.Title" data-location="@job.Location">
                <h3>@job.Title</h3>
                <p>Company: @job.Company</p>
                <p>Location: @job.Location</p>
                <p>Posted: @job.PostedDate.ToString("MMMM dd, yyyy")</p>
                <a href="@Url.Action("Details", "Jobs", new { id = job.Id })" class="view-btn">View Details</a>
                <button class="apply-btn">Apply</button>
            </div>
        }
    </div>
</div>

<script>
    function filterJobs() {
        const titleFilter = document.getElementById('title-filter').value.toLowerCase();
        const locationFilter = document.getElementById('location-filter').value.toLowerCase();
        const jobCards = document.querySelectorAll('.job-card');

        jobCards.forEach(card => {
            const title = card.getAttribute('data-title').toLowerCase();
            const location = card.getAttribute('data-location').toLowerCase();
            const matches = (!titleFilter || title.includes(titleFilter)) &&
                            (!locationFilter || location.includes(locationFilter));
            card.style.display = matches ? '' : 'none';
        });
    }
</script>
