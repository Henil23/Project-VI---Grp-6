@model Student

@{
    Layout = "_Layout";
    var message = ViewBag.ErrorMessage;
}

<div class="signin-form-container">
    <div class="signin-form">
        <h1 class="form-title">Update Your Account</h1>
        <p>@TempData["ErrorMessage"]</p>
        <form id="updateStudentForm" method="post" action="@Url.Action("UpdateStudent", "Student")">
            @Html.AntiForgeryToken()
            <div class="form-group">
                <input type="text" id="FirstName" value="@Model.FirstName" name="FirstName" placeholder="First Name" required />
            </div>
            <div class="form-group">
                <input type="text" id="LastName" value="@Model.LastName" name="LastName" placeholder="Last Name" required />
            </div>
            <div class="form-group">
                <input type="email" id="StudentEmail" value="@Model.StudentEmail" name="StudentEmail" placeholder="Email" required />
            </div>
            <div class="form-group">
                <input type="date" id="StudentDOB" value="@Model.StudentDOB?.ToString("yyyy-MM-dd")" name="StudentDOB" required />
            </div>
            <div class="form-group">
                <input type="text" id="StudentAddress" value="@Model.StudentAddress" name="StudentAddress" placeholder="Address" required />
            </div>
            <div class="form-group">
                <input type="text" id="StudentCity" value="@Model.StudentCity" name="StudentCity" placeholder="City" required />
            </div>
            <div class="form-group">
                <input type="text" id="StudentCountry" value="@Model.StudentCountry" name="StudentCountry" placeholder="Country" required />
            </div>
            <div class="form-group">
                <select id="School" name="School" asp-for="School" class="form-control" asp-items="ViewBag.Schools" required>
                    <option value="" disabled selected>Post-Secondary Institution</option>
                    <option value="conestoga">Conestoga College</option>
                    <option value="waterloo university">University of Waterloo</option>
                    <option value="laurier">Laurier University</option>
                    <option value="guelph university">University of Guelph</option>
                </select>
            </div>
            <div class="form-group">
                <input type="password" value="@Model.StudentPassword" id="StudentPassword" name="StudentPassword" placeholder="Password" required />
            </div>
            <div class="form-group">
                <button id="updateSpecificFields" type="button" class="submit-btn">Update</button>
                <button id="updateFull" type="button" class="submit-btn">Full Update</button>
            </div>
        </form>
        <div class="student-option-links">
            <a href="@Url.Action("DeleteStudentForm", "Student")">Delete Account</a>
        </div>
    </div>
</div>

<script>
    document.getElementById("updateSpecificFields").addEventListener("click", async function(event) {
        event.preventDefault();

        // Collect form data
        const formData = new FormData(document.getElementById("updateStudentForm"));
        const studentData = {};
        formData.forEach((value, key) => {
            studentData[key] = value;
        });

        // Prepare the payload for PATCH
        const documentToSend = [];
        for (const [key, value] of Object.entries(studentData)) {
            if (value.trim() !== "") {
                documentToSend.push({ "op": "replace", "path": `/${key}`, "value": value });
            }
        }

        const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        // Send PATCH request
        const response = await fetch('@Url.Action("UpdateStudent", "Student")', {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': csrfToken
            },
            body: JSON.stringify(documentToSend)
        });

        const result = await response.json();

        if (response.ok) {
            alert("Student updated successfully");
            window.location.reload(); // Refresh the page after success
        } else {
            alert('Error: ' + result.errors.join(", "));
        }
    });

        document.getElementById("updateFull").addEventListener("click", async function(event) {
        event.preventDefault();

        const formData = new FormData(document.getElementById("updateStudentForm"));
        const studentData = {};
        formData.forEach((value, key) => {
            studentData[key] = value;
        });

        // Prepare the payload for PUT (full update)
        const documentToSend = Object.entries(studentData).map(([key, value]) => {
            return { "op": "replace", "path": `/${key}`, "value": value };
        });

        const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        const response = await fetch('@Url.Action("UpdateStudentPut", "Student")', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': csrfToken
            },
            body: JSON.stringify(studentData)
        });

        const result = await response.json();

        if (response.ok) {
            alert("Student updated successfully");
        } else {
            alert('Error: ' + result.errors);
        }
    });
</script>
